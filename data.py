from telebot import types
import config
import pickle
import os


__users_list = []

class User:
	def __init__(self, username: str, chat_id: int):
		self.username = username
		self.chat_id = chat_id
		self.is_started = False

	def __str__(self) -> str:
		return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.username}"

	def start(self):
		self.is_started = True

class Filler(User):
	def __init__(self, username: str, chat_id: int):
		super().__init__(username, chat_id)
		self.selected_question = 0
		self.is_complited = False
		self.is_question_asked = False
		self.last_question_message = None
		self.available_skips = 3
		self.profile = []
		self.rating = 0
		self.rating_is_ended = False

	def __str__(self) -> str:
		if not self.selected_question == -1:
			return f"–û–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π <code>{self.username}</code> –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {self.selected_question} –≤–æ–ø—Ä–æ—Å–æ–≤."
		else:
			if self.rating_is_ended and self.rating >= 0:
				return f"–û–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π <code>{self.username}</code> –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É."
			else:
				return f"–û–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π <code>{self.username}</code> –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏ –∏–º–µ–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ {self.rating}."
				
	def start(self):
		if not self.is_started:
			config.bot.send_message(self.chat_id, f"‚ùóÔ∏è–°–µ–π—á–∞—Å –±–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–∞–º {len(config.questions)} –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –û–¢–í–ï–ß–ê–ô–¢–ï –ß–ï–°–¢–ù–û‚ùóÔ∏è")
			self.ask_question()
			self.is_started = True

	def ask_question(self):
		config.wait()
		markup = types.InlineKeyboardMarkup()

		if not self.available_skips == 0:
			skip_button = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data = f"skip_question:{self.username}")
			markup.add(skip_button)

		last_question_message = config.bot.send_message(self.chat_id, f"{self.selected_question + 1}. {config.questions[self.selected_question]['question']}\n\n(–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /questions,\n–ü—Ä–æ–ø—É—Å–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {self.available_skips})", reply_markup = markup)

		if not self.available_skips == 0:
			self.last_question_message = last_question_message
		else:
			self.last_question_message = None;

		self.is_question_asked = True

	def get_answer(self, message):
		if not self.is_complited:
			if self.is_question_asked:
				message_type = message.content_type
				is_message_expected_type = message_type == config.questions[self.selected_question]["type"]

				if message_type == "text":
					if message.text == "skip" or message.text == "–ø—Ä–æ–ø—É—â–µ–Ω–æ" or message.text == "*–ø—Ä–æ–ø—É—â–µ–Ω–æ*":
						if not self.available_skips == 0:
							self.skip_question()
						else:
							config.bot.send_message(self.chat_id, "–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏.")
							
					elif is_message_expected_type and "/" not in message.text and not "üëÜ" == message.text:
						self.profile.append(message.text)
						self.__answer_good()

				elif message_type == "photo" and is_message_expected_type:
					largest_photo = max(message.photo, key = lambda p: p.file_size)
					self.profile.append(largest_photo.file_id)
					self.__answer_good()
		else:
			if self.rating_is_ended and self.rating >= 0:
				config.bot.reply_to(message, f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n{config.link_to_group}")
			else:
				config.bot.reply_to(message, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.")

	def skip_question(self):
		self.profile.append("*–ø—Ä–æ–ø—É—â–µ–Ω–æ*")
		self.available_skips -= 1
		self.__answer_good()

	def __answer_good(self):
		if not self.last_question_message is None:
			config.bot.edit_message_text(chat_id = self.chat_id, message_id = self.last_question_message.message_id, text = self.last_question_message.text)
			self.last_question_message = None;

		config.bot.send_message(self.chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
		self.selected_question += 1
		self.is_question_asked = False

		if self.selected_question < len(config.questions):
			self.ask_question()
		else:
			self.is_complited = True
			self.selected_question = -1
			self.show_profile()

		write_users_list_file()

	def show_profile(self):
		profile_text = ""
		profile_images = []

		for i in range(len(self.profile)):
			if config.questions[i]["type"] == "text":
				profile_text += f"{config.questions[i]['question']}\n{self.profile[i]}\n\n"
				
			elif config.questions[i]["type"] == "photo":

				if not self.profile[i] == "*–ø—Ä–æ–ø—É—â–µ–Ω–æ*":
					profile_images.append(self.profile[i])
					profile_text += f"{config.questions[i]['question']}\nüëÜ\n\n"
				else:
					profile_text += f"{config.questions[i]['question']}\n*–ø—Ä–æ–ø—É—â–µ–Ω–æ*\n\n"

		config.wait()
		config.bot.send_message(self.chat_id, "–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:")
		config.wait()

		if profile_images:
			for image in profile_images:
				config.bot.send_photo(self.chat_id, image)

		config.bot.send_message(self.chat_id, profile_text)
		config.wait()
		config.bot.send_message(self.chat_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º –≥—Ä—É–ø–ø—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

		for admin in find_users(Admin):
			admin.send_anketa(self.username, profile_text, profile_images)

		del self.is_question_asked
		del self.last_question_message
		del self.available_skips
		del self.profile

		write_users_list_file()

	def end_rating(self):
		if self.rating >= 0:
			config.bot.send_message(self.chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É!")
			config.wait()
			config.bot.send_message(self.chat_id, f"–í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{config.link_to_group}")
		elif self.rating < 0:
			config.bot.send_message(self.chat_id, "–ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –≤ –≥—Ä—É–ø–ø—É.")

		self.rating_is_ended = True
		write_users_list_file()

class Admin(User):
	def __init__(self, username: str, chat_id: int, status: str):
		super().__init__(username, chat_id)

		if status == "normal" or status == "super":
			self.status = status
		else:
			self.status = "normal"

		self.last_ask_message = None;

	def __str__(self) -> str:
		return f"–ê–¥–º–∏–Ω <code>{self.username}</code> —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {self.status}."

	def start(self):
		if not self.is_started:
			if self.status == "normal":
				config.bot.send_message(self.chat_id, "–¢—ã - –∞–¥–º–∏–Ω. –°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
			else:
				config.bot.send_message(self.chat_id, "–¢—ã - —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /submit —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

			self.is_started = True

	def send_anketa(self, username: str, profile_text: str, images_list: list):
		for image in images_list:
			config.bot.send_photo(self.chat_id, image)

		config.bot.send_message(self.chat_id, profile_text)
		config.wait()

		markup = types.InlineKeyboardMarkup()
		button_callback_data = f"{username}:{self.username}:{self.status}"
		plus_button = types.InlineKeyboardButton("üëç", callback_data = f"add:{button_callback_data}")
		minus_button = types.InlineKeyboardButton("üëé", callback_data = f"dont_add:{button_callback_data}")
		markup.row(plus_button, minus_button)

		self.last_ask_message = config.bot.send_message(self.chat_id, "–î–æ–±–∞–≤–ª—è—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É?", reply_markup = markup)

def read_users_list_file():
	global __users_list
	with open(config.users_list_dirrectory, "rb") as file:
		if not os.path.getsize(config.users_list_dirrectory) == 0:
			__users_list = pickle.load(file)

def write_users_list_file():
	global __users_list
	with open(config.users_list_dirrectory, "wb") as file:
		pickle.dump(__users_list, file)

def get_index_in_list(user: User) -> int:
	global __users_list
	if __users_list:
		for i in range(len(__users_list)):
			if __users_list[i].username == user.username:
				return i
	else:
		return -1

def create_user_obj(username: str, chat_id: int) -> User:
	global __users_list
	admin_found = False
	for admin in config.admins:
		if admin["username"] == username:
			admin_found = True
			break

	user_obj = None
	if admin_found:
		for admin in config.admins:
			if admin["username"] == username:
				user_obj = Admin(username, chat_id, admin["status"])
	else:
		user_obj = Filler(username, chat_id)

	add_user(user_obj)
	return user_obj

def find_users(user_type: type, username: str = None) -> list:
	global __users_list
	if not __users_list == []:
		users_by_type = []
		for user in __users_list:
			if isinstance(user, user_type):
				if username is not None:
					if user.username == username:
						users_by_type.append(user)
				else:
					users_by_type.append(user)

		return users_by_type
	else:
		return []

def add_user(user: User):
	global __users_list
	if isinstance(user, User):
		__users_list.append(user)

def delete_users(users_to_delete: list):
	global __users_list
	for user in users_to_delete:
		del __users_list[get_index_in_list(user)]